<#--
 Copyright 2020 OmniSci, Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

data: {
    parser: {
      # Generated parser implementation class package and name
      package: "com.mapd.parser.extension.ddl",
      class: "ExtendedSqlParser",

      # List of import statements.
      imports: [
        "org.apache.calcite.sql.SqlDdl"
        "org.apache.calcite.sql.SqlCreate"
        "org.apache.calcite.sql.SqlDrop"
        "com.mapd.parser.extension.ddl.SqlCreateServer"
        "com.mapd.parser.extension.ddl.SqlDropServer"
        "com.mapd.parser.extension.ddl.SqlShowTables"
        "com.mapd.parser.extension.ddl.SqlAlterServer"
        "com.mapd.parser.extension.ddl.SqlCreateForeignTable"
        "com.mapd.parser.extension.ddl.SqlDropForeignTable"
        "com.mapd.parser.extension.ddl.SqlRefreshForeignTables"
        "com.mapd.parser.extension.ddl.SqlCreateUserMapping"
        "com.mapd.parser.extension.ddl.SqlDropUserMapping"
        "com.mapd.parser.extension.ddl.SqlShowUserSessions"
        "com.mapd.parser.extension.ddl.SqlShowForeignServers"
        "com.mapd.parser.extension.ddl.omnisql.*"
        "java.util.Map"
        "java.util.HashMap"
      ]

      # List of keywords.
      keywords: [
        # New keywords introduced by the extended parser that are absent in Calcite core.
        "IF"
        "FIXED"
        "DICT"
        "COMPRESSED"
        "POINT"
        "POLYGON"
        "LINESTRING"
        "MULTIPOLYGON"
        "TEXT"
        "REFRESH"
        "SESSIONS"
        "TABLES"
        "DATABASES"
        "SERVERS"
        "MAPPING"
        "OWNER"
        "RENAME"
      ]

      # List of keywords from "keywords" section that are not reserved.
      nonReservedKeywords: [
        # Calcite expects each parser/parser extension to define its list of keywords
        # that are not reserved keywords. There used to be a CommonNonReservedKeywords()
        # method in the core parser that is now removed (related commit:
        # https://github.com/apache/calcite/commit/561c6427e3602510d619b45cd7da840773fa0d2c).
        #
        # The following non-reserved keywords are derived from the Calcite core parser.
        "A"
        "ABSENT"
        "ABSOLUTE"
        "ACTION"
        "ADA"
        "ADD"
        "ADMIN"
        "AFTER"
        "ALWAYS"
        "APPLY"
        "ASC"
        "ASSERTION"
        "ASSIGNMENT"
        "ATTRIBUTE"
        "ATTRIBUTES"
        "BEFORE"
        "BERNOULLI"
        "BREADTH"
        "C"
        "CASCADE"
        "CATALOG"
        "CATALOG_NAME"
        "CENTURY"
        "CHAIN"
        "CHARACTERISTICS"
        "CHARACTERS"
        "CHARACTER_SET_CATALOG"
        "CHARACTER_SET_NAME"
        "CHARACTER_SET_SCHEMA"
        "CLASS_ORIGIN"
        "COBOL"
        "COLLATION"
        "COLLATION_CATALOG"
        "COLLATION_NAME"
        "COLLATION_SCHEMA"
        "COLUMN_NAME"
        "COMMAND_FUNCTION"
        "COMMAND_FUNCTION_CODE"
        "COMMITTED"
        "CONDITION_NUMBER"
        "CONDITIONAL"
        "CONNECTION"
        "CONNECTION_NAME"
        "CONSTRAINT_CATALOG"
        "CONSTRAINT_NAME"
        "CONSTRAINTS"
        "CONSTRAINT_SCHEMA"
        "CONSTRUCTOR"
        "CONTINUE"
        "CURSOR_NAME"
        "DATA"
        "DATABASE"
        "DATETIME_INTERVAL_CODE"
        "DATETIME_INTERVAL_PRECISION"
        "DAYS"
        "DECADE"
        "DEFAULTS"
        "DEFERRABLE"
        "DEFERRED"
        "DEFINED"
        "DEFINER"
        "DEGREE"
        "DEPTH"
        "DERIVED"
        "DESC"
        "DESCRIPTION"
        "DESCRIPTOR"
        "DIAGNOSTICS"
        "DISPATCH"
        "DOMAIN"
        "DOW"
        "DOY"
        "DYNAMIC_FUNCTION"
        "DYNAMIC_FUNCTION_CODE"
        "ENCODING"
        "EPOCH"
        "ERROR"
        "EXCEPTION"
        "EXCLUDE"
        "EXCLUDING"
        "FINAL"
        "FIRST"
        "FOLLOWING"
        "FOREIGN"
        "FORMAT"
        "FORTRAN"
        "FOUND"
        "FRAC_SECOND"
        "G"
        "GENERAL"
        "GENERATED"
        "GEOMETRY"
        "GO"
        "GOTO"
        "GRANTED"
        "HIERARCHY"
        "HOURS"
        "IGNORE"
        "IMMEDIATE"
        "IMMEDIATELY"
        "IMPLEMENTATION"
        "INCLUDING"
        "INCREMENT"
        "INITIALLY"
        "INPUT"
        "INSTANCE"
        "INSTANTIABLE"
        "INVOKER"
        "ISODOW"
        "ISOLATION"
        "ISOYEAR"
        "JAVA"
        "JSON"
        "K"
        "KEY"
        "KEY_MEMBER"
        "KEY_TYPE"
        "LABEL"
        "LAST"
        "LENGTH"
        "LEVEL"
        "LIBRARY"
        "LOCATOR"
        "M"
        "MAP"
        "MATCHED"
        "MAXVALUE"
        "MESSAGE_LENGTH"
        "MESSAGE_OCTET_LENGTH"
        "MESSAGE_TEXT"
        "MICROSECOND"
        "MILLENNIUM"
        "MILLISECOND"
        "MINUTES"
        "MINVALUE"
        "MONTHS"
        "MORE_"
        "MUMPS"
        "NAME"
        "NAMES"
        "NANOSECOND"
        "NESTING"
        "NORMALIZED"
        "NULLABLE"
        "NULLS"
        "NUMBER"
        "OBJECT"
        "OCTETS"
        "OPTION"
        "OPTIONS"
        "ORDERING"
        "ORDINALITY"
        "OTHERS"
        "OUTPUT"
        "OVERRIDING"
        "PAD"
        "PARAMETER_MODE"
        "PARAMETER_NAME"
        "PARAMETER_ORDINAL_POSITION"
        "PARAMETER_SPECIFIC_CATALOG"
        "PARAMETER_SPECIFIC_NAME"
        "PARAMETER_SPECIFIC_SCHEMA"
        "PARTIAL"
        "PASCAL"
        "PASSING"
        "PASSTHROUGH"
        "PAST"
        "PATH"
        "PLACING"
        "PLAN"
        "PLI"
        "PRECEDING"
        "PRESERVE"
        "PRIOR"
        "PRIVILEGES"
        "PUBLIC"
        "QUARTER"
        "READ"
        "RELATIVE"
        "REPEATABLE"
        "REPLACE"
        "RESPECT"
        "RESTART"
        "RESTRICT"
        "RETURNED_CARDINALITY"
        "RETURNED_LENGTH"
        "RETURNED_OCTET_LENGTH"
        "RETURNED_SQLSTATE"
        "RETURNING"
        "ROLE"
        "ROUTINE"
        "ROUTINE_CATALOG"
        "ROUTINE_NAME"
        "ROUTINE_SCHEMA"
        "ROW_COUNT"
        "SCALAR"
        "SCALE"
        "SCHEMA"
        "SCHEMA_NAME"
        "SCOPE_CATALOGS"
        "SCOPE_NAME"
        "SCOPE_SCHEMA"
        "SECONDS"
        "SECTION"
        "SECURITY"
        "SELF"
        "SEQUENCE"
        "SERIALIZABLE"
        "SERVER"
        "SERVER_NAME"
        "SESSION"
        "SETS"
        "SIMPLE"
        "SIZE"
        "SOURCE"
        "SPACE"
        "SPECIFIC_NAME"
        "SQL_BIGINT"
        "SQL_BINARY"
        "SQL_BIT"
        "SQL_BLOB"
        "SQL_BOOLEAN"
        "SQL_CHAR"
        "SQL_CLOB"
        "SQL_DATE"
        "SQL_DECIMAL"
        "SQL_DOUBLE"
        "SQL_FLOAT"
        "SQL_INTEGER"
        "SQL_INTERVAL_DAY"
        "SQL_INTERVAL_DAY_TO_HOUR"
        "SQL_INTERVAL_DAY_TO_MINUTE"
        "SQL_INTERVAL_DAY_TO_SECOND"
        "SQL_INTERVAL_HOUR"
        "SQL_INTERVAL_HOUR_TO_MINUTE"
        "SQL_INTERVAL_HOUR_TO_SECOND"
        "SQL_INTERVAL_MINUTE"
        "SQL_INTERVAL_MINUTE_TO_SECOND"
        "SQL_INTERVAL_MONTH"
        "SQL_INTERVAL_SECOND"
        "SQL_INTERVAL_YEAR"
        "SQL_INTERVAL_YEAR_TO_MONTH"
        "SQL_LONGVARBINARY"
        "SQL_LONGVARCHAR"
        "SQL_LONGVARNCHAR"
        "SQL_NCHAR"
        "SQL_NCLOB"
        "SQL_NUMERIC"
        "SQL_NVARCHAR"
        "SQL_REAL"
        "SQL_SMALLINT"
        "SQL_TIME"
        "SQL_TIMESTAMP"
        "SQL_TINYINT"
        "SQL_TSI_DAY"
        "SQL_TSI_FRAC_SECOND"
        "SQL_TSI_HOUR"
        "SQL_TSI_MICROSECOND"
        "SQL_TSI_MINUTE"
        "SQL_TSI_MONTH"
        "SQL_TSI_QUARTER"
        "SQL_TSI_SECOND"
        "SQL_TSI_WEEK"
        "SQL_TSI_YEAR"
        "SQL_VARBINARY"
        "SQL_VARCHAR"
        "STATE"
        "STATEMENT"
        "STRUCTURE"
        "STYLE"
        "SUBCLASS_ORIGIN"
        "SUBSTITUTE"
        "TABLE_NAME"
        "TEMPORARY"
        "TIES"
        "TIMESTAMPADD"
        "TIMESTAMPDIFF"
        "TOP_LEVEL_COUNT"
        "TRANSACTION"
        "TRANSACTIONS_ACTIVE"
        "TRANSACTIONS_COMMITTED"
        "TRANSACTIONS_ROLLED_BACK"
        "TRANSFORM"
        "TRANSFORMS"
        "TRIGGER_CATALOG"
        "TRIGGER_NAME"
        "TRIGGER_SCHEMA"
        "TUMBLE"
        "TYPE"
        "UNBOUNDED"
        "UNCOMMITTED"
        "UNCONDITIONAL"
        "UNDER"
        "UNNAMED"
        "USAGE"
        "USER_DEFINED_TYPE_CATALOG"
        "USER_DEFINED_TYPE_CODE"
        "USER_DEFINED_TYPE_NAME"
        "USER_DEFINED_TYPE_SCHEMA"
        "UTF16"
        "UTF32"
        "UTF8"
        "VERSION"
        "VIEW"
        "WEEK"
        "WORK"
        "WRAPPER"
        "WRITE"
        "XML"
        "YEARS"
        "ZONE"
      ]

      # List of non-reserved keywords to add;
      # items in this list become non-reserved
      nonReservedKeywordsToAdd: [
      ]

      # List of non-reserved keywords to remove;
      # items in this list become reserved
      nonReservedKeywordsToRemove: [
      ]

      # List of additional join types. Each is a method with no arguments.
      # Example: LeftSemiJoin()
      joinTypes: [
      ]

      # List of methods for parsing custom SQL statements.
      statementParserMethods: [
        "SqlShowUserSessions(span())"
        "SqlShowTables(span())"
        "SqlShowDatabases(span())"
        "SqlShowForeignServers(span())"
        "SqlAlterServer(span())"
        "SqlRefreshForeignTables(span())"
      ]

      # List of methods for parsing custom literals.
      # Example: ParseJsonLiteral().
      literalParserMethods: [
      ]

      # List of methods for parsing custom data types.
      dataTypeParserMethods: [
          "OmniSciGeoDataType()"
          "OmniText()"
      ]

      # List of methods for parsing builtin function calls.
      # Return type of method implementation should be "SqlNode".
      # Example: DateFunctionCall().
      builtinFunctionCallMethods: [
      ]

      # List of methods for parsing extensions to "ALTER <scope>" calls.
      # Each must accept arguments "(SqlParserPos pos, String scope)".
      alterStatementParserMethods: [
      ]

      # List of methods for parsing extensions to "CREATE [OR REPLACE]" calls.
      # Each must accept arguments "(SqlParserPos pos, boolean replace)".
      createStatementParserMethods: [
        "SqlCreateServer"
        "SqlCreateForeignTable"
        "SqlCreateUserMapping"
      ]

      # List of methods for parsing extensions to "DROP" calls.
      # Each must accept arguments "(SqlParserPos pos)".
      dropStatementParserMethods: [
        "SqlDropServer"
        "SqlDropForeignTable"
        "SqlDropUserMapping"
      ]


      # Binary operators tokens
      binaryOperatorsTokens: [
      ]

      # Binary operators initialization
      extraBinaryExpressions: [
      ]

      # List of files in @includes directory that have parser method
      # implementations for parsing custom SQL statements, literals or types
      # given as part of "statementParserMethods", "literalParserMethods" or
      # "dataTypeParserMethods".
      implementationFiles: [
        "foreignServerParser.ftl"
        "foreignTableParser.ftl"
        "showCommandsParser.ftl"
        "userMappingParser.ftl"
      ]

      includePosixOperators: false
      includeCompoundIdentifier: true
      includeBraces: true
      includeAdditionalDeclarations: false
    }
}

freemarkerLinks: {
    includes: includes/
}
